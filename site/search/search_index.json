{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projeto Reconhecimento facial: identifica\u00e7\u00e3o do operador presente no equipamento. Desenvolvedores: Gabriel Mauly | gabriel.mauly@solinftec.com.br Rene Gonzalez | rene.gonzalez@solinftec.com.br Arquitetura environment.yml # Depend\u00eancias do projeto mkdocs.yml # Arquivo de configura\u00e7\u00e3o. docs/ index.md # P\u00e1gina da documenta\u00e7\u00e3o. images/ # Faces a serem treinadas e reconhecidas models/ # cont\u00e9m os modelos treinados codes.npy imagens.npy names.npy Operador.py # Algoritmo principal, realiza o reconhecimento e comunica\u00e7\u00e3o serial Treinamento.py # Realiza o treinamento das faces Anaconda Para usu\u00e1rios anaconda, abra o terminal na pasta do projeto e utilize o seguinte comando para instalar as depend\u00eancias: conda env create -f environment.yml Comandos Para executar o treinamento de novas faces utilize: python Treinamento.py obs: \u00c9 necess\u00e1rio editar o arquivo Treinamento.py, adicionando a \u00faltima linha qual fun\u00e7\u00e3o de treinamento deseja utilizar train() ou train_pc(). Para rodar o reconhecimento facial utilize: python Operador.py Codifica\u00e7\u00e3o Explica\u00e7\u00e3o das classes implementadas Class Treinamento.py Bibliotecas: import face_recognition as fr import glob import numpy as np import os from time import time Fun\u00e7\u00f5es: split_string() Converte o valor de uma string em uma lista de acordo com o crit\u00e9rio de separa\u00e7\u00e3o passado como par\u00e2metro. split_string(value, char) value: (string) valor a ser convertido em lista char: (string) crit\u00e9rio de separa\u00e7\u00e3o Exemplo: >> data = '10.gabriel.jpg' >> value = split_string(value=data, char='.') >> print(value) >> ['10', 'gabriel', 'jpg] train() Realiza o treinamento das faces no dispositivo (atualmente raspberry Pi), n\u00e3o \u00e9 necess\u00e1rio passar nenhum par\u00e2metro, pois o mesmo realiza a leitura das imagens e gera os modelos treinados. train_pc() Realiza o treinamento das faces no desktop, a diferen\u00e7a est\u00e1 na maneira que o SO local trata o sistema de diret\u00f3rios. Class Operador.py Bibliotecas: from __future__ import print_function from imutils.video import WebcamVideoStream from imutils.video import FPS import argparse import imutils import cv2 import dlib import face_recognition as fr import multiprocessing import numpy as np import os import serial import shutil import _thread as tr import time from Treinamento import split_string, train Fun\u00e7\u00f5es: check_sum() Gera o check sum da mensagem (d\u00edgito que valida a integridade da informa\u00e7\u00e3o) check_sum(hexadecimal): hexadecimal: (string) mensagem (informa\u00e7\u00e3o) que precisa do d\u00edgito validador Exemplo: >> mensagem = '$PNEUD,G,0,1,' >> mensagem = check_sum(hexadecimal=mensagem) >> print(mensagem) >> 28 init_board() Respons\u00e1vel por iniciar a comunica\u00e7\u00e3o serial com o bordo, n\u00e3o \u00e9 necess\u00e1rio passar nenhum par\u00eamtro, tem como retorno a conex\u00e3o estabelecida. identifier_face() Respons\u00e1vel por identificar um rosto para o cadastro autom\u00e1tico, retorna a face reconhecida para treinamento. identifier_face(mean, tempo, camera, fps): mean: (float) M\u00e9dia de confian\u00e7a na identifica\u00e7\u00e3o de uma face tempo: (int) Tempo m\u00e1ximo para realizar a identifica\u00e7\u00e3o da face camera: (object) C\u00e2mera respons\u00e1vel por ler os frames fps: (object) Atualiza o fps do frame wait_ok() Respons\u00e1vel por aguardar a confirma\u00e7\u00e3o de recebimento do bordo. wait_ok(message, tempo): message: (string) mensagem a ser enviada para o bordo tempo: (int) tempo m\u00e1ximo de espera para receber a confirma\u00e7\u00e3o send_message() Respons\u00e1vel por enviar mensagem para o bordo pela porta serial send_message(board, message, tempo): board: (object) Objeto com a conex\u00e3o serial message: (string) mensagem a ser enviada tempo: (int) caso tenha que aguardar confirma\u00e7\u00e3o, tempo m\u00e1ximo de espera load_models() Respons\u00e1vel por carregar os modelos treinados. alter_turn() Respons\u00e1vel em definir o tempo de espera para a troca de turno. alter_turn(timeout): timeout: (int) tempo de espera. read_serial() Respons\u00e1vel por realizar a leitura das informa\u00e7\u00f5es na porta serial read_serial(board, flags, conn): board: (object) Conex\u00e3o com a porta serial flags: (object) Vari\u00e1vel de comunica\u00e7\u00e3o entre processos conn: (object) Comunica\u00e7\u00e3o entre processos recognition() Respons\u00e1vel por realizar o reconhecimento facial recognition(board, flags, conn): board: (object) Conex\u00e3o com a porta serial flags: (object) Vari\u00e1vel de comunica\u00e7\u00e3o entre processos conn: (object) Comunica\u00e7\u00e3o entre processos","title":"Home"},{"location":"#projeto","text":"Reconhecimento facial: identifica\u00e7\u00e3o do operador presente no equipamento. Desenvolvedores: Gabriel Mauly | gabriel.mauly@solinftec.com.br Rene Gonzalez | rene.gonzalez@solinftec.com.br","title":"Projeto"},{"location":"#arquitetura","text":"environment.yml # Depend\u00eancias do projeto mkdocs.yml # Arquivo de configura\u00e7\u00e3o. docs/ index.md # P\u00e1gina da documenta\u00e7\u00e3o. images/ # Faces a serem treinadas e reconhecidas models/ # cont\u00e9m os modelos treinados codes.npy imagens.npy names.npy Operador.py # Algoritmo principal, realiza o reconhecimento e comunica\u00e7\u00e3o serial Treinamento.py # Realiza o treinamento das faces","title":"Arquitetura"},{"location":"#anaconda","text":"Para usu\u00e1rios anaconda, abra o terminal na pasta do projeto e utilize o seguinte comando para instalar as depend\u00eancias: conda env create -f environment.yml","title":"Anaconda"},{"location":"#comandos","text":"Para executar o treinamento de novas faces utilize: python Treinamento.py obs: \u00c9 necess\u00e1rio editar o arquivo Treinamento.py, adicionando a \u00faltima linha qual fun\u00e7\u00e3o de treinamento deseja utilizar train() ou train_pc(). Para rodar o reconhecimento facial utilize: python Operador.py","title":"Comandos"},{"location":"#codificacao","text":"Explica\u00e7\u00e3o das classes implementadas","title":"Codifica\u00e7\u00e3o"},{"location":"#class-treinamentopy","text":"Bibliotecas: import face_recognition as fr import glob import numpy as np import os from time import time Fun\u00e7\u00f5es: split_string() Converte o valor de uma string em uma lista de acordo com o crit\u00e9rio de separa\u00e7\u00e3o passado como par\u00e2metro. split_string(value, char) value: (string) valor a ser convertido em lista char: (string) crit\u00e9rio de separa\u00e7\u00e3o Exemplo: >> data = '10.gabriel.jpg' >> value = split_string(value=data, char='.') >> print(value) >> ['10', 'gabriel', 'jpg] train() Realiza o treinamento das faces no dispositivo (atualmente raspberry Pi), n\u00e3o \u00e9 necess\u00e1rio passar nenhum par\u00e2metro, pois o mesmo realiza a leitura das imagens e gera os modelos treinados. train_pc() Realiza o treinamento das faces no desktop, a diferen\u00e7a est\u00e1 na maneira que o SO local trata o sistema de diret\u00f3rios.","title":"Class Treinamento.py"},{"location":"#class-operadorpy","text":"Bibliotecas: from __future__ import print_function from imutils.video import WebcamVideoStream from imutils.video import FPS import argparse import imutils import cv2 import dlib import face_recognition as fr import multiprocessing import numpy as np import os import serial import shutil import _thread as tr import time from Treinamento import split_string, train Fun\u00e7\u00f5es: check_sum() Gera o check sum da mensagem (d\u00edgito que valida a integridade da informa\u00e7\u00e3o) check_sum(hexadecimal): hexadecimal: (string) mensagem (informa\u00e7\u00e3o) que precisa do d\u00edgito validador Exemplo: >> mensagem = '$PNEUD,G,0,1,' >> mensagem = check_sum(hexadecimal=mensagem) >> print(mensagem) >> 28 init_board() Respons\u00e1vel por iniciar a comunica\u00e7\u00e3o serial com o bordo, n\u00e3o \u00e9 necess\u00e1rio passar nenhum par\u00eamtro, tem como retorno a conex\u00e3o estabelecida. identifier_face() Respons\u00e1vel por identificar um rosto para o cadastro autom\u00e1tico, retorna a face reconhecida para treinamento. identifier_face(mean, tempo, camera, fps): mean: (float) M\u00e9dia de confian\u00e7a na identifica\u00e7\u00e3o de uma face tempo: (int) Tempo m\u00e1ximo para realizar a identifica\u00e7\u00e3o da face camera: (object) C\u00e2mera respons\u00e1vel por ler os frames fps: (object) Atualiza o fps do frame wait_ok() Respons\u00e1vel por aguardar a confirma\u00e7\u00e3o de recebimento do bordo. wait_ok(message, tempo): message: (string) mensagem a ser enviada para o bordo tempo: (int) tempo m\u00e1ximo de espera para receber a confirma\u00e7\u00e3o send_message() Respons\u00e1vel por enviar mensagem para o bordo pela porta serial send_message(board, message, tempo): board: (object) Objeto com a conex\u00e3o serial message: (string) mensagem a ser enviada tempo: (int) caso tenha que aguardar confirma\u00e7\u00e3o, tempo m\u00e1ximo de espera load_models() Respons\u00e1vel por carregar os modelos treinados. alter_turn() Respons\u00e1vel em definir o tempo de espera para a troca de turno. alter_turn(timeout): timeout: (int) tempo de espera. read_serial() Respons\u00e1vel por realizar a leitura das informa\u00e7\u00f5es na porta serial read_serial(board, flags, conn): board: (object) Conex\u00e3o com a porta serial flags: (object) Vari\u00e1vel de comunica\u00e7\u00e3o entre processos conn: (object) Comunica\u00e7\u00e3o entre processos recognition() Respons\u00e1vel por realizar o reconhecimento facial recognition(board, flags, conn): board: (object) Conex\u00e3o com a porta serial flags: (object) Vari\u00e1vel de comunica\u00e7\u00e3o entre processos conn: (object) Comunica\u00e7\u00e3o entre processos","title":"Class Operador.py"}]}